// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// is_valid_alphabet_cpp
std::vector<bool> is_valid_alphabet_cpp(const std::vector<std::string>& strs, const std::string& alphabet);
RcppExport SEXP _shortuuid_is_valid_alphabet_cpp(SEXP strsSEXP, SEXP alphabetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type strs(strsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type alphabet(alphabetSEXP);
    rcpp_result_gen = Rcpp::wrap(is_valid_alphabet_cpp(strs, alphabet));
    return rcpp_result_gen;
END_RCPP
}
// encode58_string
std::string encode58_string(const std::string& input, const std::string& alphabet);
RcppExport SEXP _shortuuid_encode58_string(SEXP inputSEXP, SEXP alphabetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type alphabet(alphabetSEXP);
    rcpp_result_gen = Rcpp::wrap(encode58_string(input, alphabet));
    return rcpp_result_gen;
END_RCPP
}
// encode58_int
std::string encode58_int(int input, const std::string& alphabet);
RcppExport SEXP _shortuuid_encode58_int(SEXP inputSEXP, SEXP alphabetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type alphabet(alphabetSEXP);
    rcpp_result_gen = Rcpp::wrap(encode58_int(input, alphabet));
    return rcpp_result_gen;
END_RCPP
}
// uuid_to_base58_cpp
std::vector<std::string> uuid_to_base58_cpp(const std::vector<std::string>& uuid_str_vec, const std::string& alphabet);
RcppExport SEXP _shortuuid_uuid_to_base58_cpp(SEXP uuid_str_vecSEXP, SEXP alphabetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type uuid_str_vec(uuid_str_vecSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type alphabet(alphabetSEXP);
    rcpp_result_gen = Rcpp::wrap(uuid_to_base58_cpp(uuid_str_vec, alphabet));
    return rcpp_result_gen;
END_RCPP
}
// bytes_to_hex
std::string bytes_to_hex(const std::vector<uint8_t>& bytes);
RcppExport SEXP _shortuuid_bytes_to_hex(SEXP bytesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<uint8_t>& >::type bytes(bytesSEXP);
    rcpp_result_gen = Rcpp::wrap(bytes_to_hex(bytes));
    return rcpp_result_gen;
END_RCPP
}
// base58_to_uuid_cpp
std::string base58_to_uuid_cpp(const std::string& base58, const std::string& alphabet);
RcppExport SEXP _shortuuid_base58_to_uuid_cpp(SEXP base58SEXP, SEXP alphabetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type base58(base58SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type alphabet(alphabetSEXP);
    rcpp_result_gen = Rcpp::wrap(base58_to_uuid_cpp(base58, alphabet));
    return rcpp_result_gen;
END_RCPP
}
// uuid_v4
std::vector<std::string> uuid_v4(size_t n);
RcppExport SEXP _shortuuid_uuid_v4(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(uuid_v4(n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_shortuuid_is_valid_alphabet_cpp", (DL_FUNC) &_shortuuid_is_valid_alphabet_cpp, 2},
    {"_shortuuid_encode58_string", (DL_FUNC) &_shortuuid_encode58_string, 2},
    {"_shortuuid_encode58_int", (DL_FUNC) &_shortuuid_encode58_int, 2},
    {"_shortuuid_uuid_to_base58_cpp", (DL_FUNC) &_shortuuid_uuid_to_base58_cpp, 2},
    {"_shortuuid_bytes_to_hex", (DL_FUNC) &_shortuuid_bytes_to_hex, 1},
    {"_shortuuid_base58_to_uuid_cpp", (DL_FUNC) &_shortuuid_base58_to_uuid_cpp, 2},
    {"_shortuuid_uuid_v4", (DL_FUNC) &_shortuuid_uuid_v4, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_shortuuid(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
